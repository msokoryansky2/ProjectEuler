package com.msokoryansky.EulerProblems

import scala.annotation.tailrec
import scala.collection.immutable.HashSet


/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

class P0012 extends EulerProblem {
  def divisors(number: Long): HashSet[Long] = {
    require(number > 0, "Must specify a positive integer")
    @tailrec def divisorsAcc(next: Long, ceiling: Long, acc: HashSet[Long]): HashSet[Long] = {
      if (next > ceiling) acc
      else {
        if (number % next > 0) divisorsAcc(next + 1, ceiling, acc)
        else {
          val factor1 = next
          val factor2 = number / next
          val acc1 = if (acc.contains(factor1)) acc else acc + factor1
          val acc2 = if (acc1.contains(factor2)) acc1 else acc1 + factor2
          divisorsAcc(factor1 + 1, factor2, acc2)
        }
      }
    }
    divisorsAcc(1, number, HashSet[Long]())
  }

  def triangleNumbers(lastTriangleIndex: Long, lastTriangleNumber: Long): Stream[Long] = {
    val nextTriangleNumber = lastTriangleNumber + lastTriangleIndex + 1
    nextTriangleNumber #:: triangleNumbers(lastTriangleIndex + 1, nextTriangleNumber)
  }

  def run: String = triangleNumbers(0, 0).filter{(n) => divisors(n).toList.length > 500}.head.toString
}

object P0012 extends App {
  (new P0012).printAnswer()
}