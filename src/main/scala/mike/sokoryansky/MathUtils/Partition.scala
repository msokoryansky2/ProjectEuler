package mike.sokoryansky.MathUtils

/**
  * Generating function is from https://en.wikipedia.org/wiki/Partition_(number_theory)#Generating_function
  * This is the number of ways, e.g., integer N can be expressed a sum of 1 or more 0 < integers <= N.
  *
  * This number of ways is p(n) = p(n – 1)  + p(n – 2) – p(n – 5) – p(n – 7) + p(n – 12) + p(n – 15) – p(n – 22)...
  * where p(0) = 1 and p(n) = 0 for n < 0. The constants 1, 2, 5, 7, 12, 15, 22... are pentagonal numbers
  * generated by alternating positive and negative indices: p5(1) == 1, p5(-1) == 2, p5(2) == 5, p5(-2) == 7, etc.
  * The signs in the series follow the pattern: + + - - + + - - + + - - ...
  */
object Partition {
  def partition(n: Long): BigInt =
    if (n < 0) 0
    else if (n == 0) 1
    else {
      def partitionAcc(i: Long, pentagonals: List[Long], acc: BigInt): BigInt = {
        if (pentagonals.isEmpty) acc
        else partitionAcc(i + 1, pentagonals.tail, acc + partition(n - pentagonals.head) * (if (i % 4 < 2) 1 else -1))
      }
      partitionAcc(0, PolygonalNumber(5).numbersWithNegs(1).takeWhile(_ <= n).toList, 0)
    }
}
