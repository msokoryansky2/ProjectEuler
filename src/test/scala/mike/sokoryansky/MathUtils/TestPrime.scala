package mike.sokoryansky.MathUtils

import org.scalatest.FunSuite

import scala.collection.immutable.{HashSet, SortedSet}

class TestPrime extends FunSuite {
  test("primeFactors should factor numbers") {
    assert(Prime.primeFactors(1, Prime.primes(Integer.ints(2)), Nil).sortWith(_ < _) === List())
    assert(Prime.primeFactors(2, Prime.primes(Integer.ints(2)), Nil).sortWith(_ < _) === List(2))
    assert(Prime.primeFactors(24, Prime.primes(Integer.ints(2)), Nil).sortWith(_ < _) === List(2, 2, 2, 3))
    assert(Prime.primeFactors(37, Prime.primes(Integer.ints(2)), Nil).sortWith(_ < _) === List(37))
    assert(Prime.primeFactors(385, Prime.primes(Integer.ints(2)), Nil).sortWith(_ < _) === List(5, 7, 11))
  }

  test("primeFactorsOfRange returns sequence of prime factors that jointly factor any number in specified range ") {
    assert(Prime.primeFactorsOfRange(1, 4).sortWith(_ > _) === Seq(2, 2, 3).sortWith(_ > _))
    assert(Prime.primeFactorsOfRange(2, 8).sortWith(_ > _) === Seq(2, 3, 2, 5, 7, 2).sortWith(_ > _))
  }

  test("isPrime tests if number is prime") {
    assert(Prime.isPrime(2) === true)
    assert(Prime.isPrime(-1) === false)
    assert(Prime.isPrime(1) === false)
    assert(Prime.isPrime(12) === false)
    assert(Prime.isPrime(29) === true)
  }

  test("primeNumber returns nth number in primes sequence") {
    assert(Prime.primeNumber(-1) === 2)
    assert(Prime.primeNumber(0) === 2)
    assert(Prime.primeNumber(1) === 2)
    assert(Prime.primeNumber(2) === 3)
    assert(Prime.primeNumber(5) === 11)
  }

  test("isPrime checks if number is prime") {
    assert(Prime.isPrime(-7) === false)
    assert(Prime.isPrime(-2) === false)
    assert(Prime.isPrime(-1) === false)
    assert(Prime.isPrime(0) === false)
    assert(Prime.isPrime(1) === false)
    assert(Prime.isPrime(2) === true)
    assert(Prime.isPrime(3) === true)
    assert(Prime.isPrime(4) === false)
    assert(Prime.isPrime(13) === true)
    assert(Prime.isPrime(16) === false)
    assert(Prime.isPrime(21) === false)
    assert(Prime.isPrime(37) === true)
  }

  test("nextPrime returns next smallest prime >= specified argument") {
    assert(Prime.nextPrime(-7) === 2)
    assert(Prime.nextPrime(-2) === 2)
    assert(Prime.nextPrime(-1) === 2)
    assert(Prime.nextPrime(0) === 2)
    assert(Prime.nextPrime(1) === 2)
    assert(Prime.nextPrime(2) === 2)
    assert(Prime.nextPrime(3) === 3)
    assert(Prime.nextPrime(4) === 5)
    assert(Prime.nextPrime(13) === 13)
    assert(Prime.nextPrime(16) === 17)
    assert(Prime.nextPrime(21) === 23)
    assert(Prime.nextPrime(37) === 37)
  }

  test("primeNumberSum returns sum of all primes < specified argument") {
    assert(Prime.primeNumberSum(-7) === 0)
    assert(Prime.primeNumberSum(-2) === 0)
    assert(Prime.primeNumberSum(-1) === 0)
    assert(Prime.primeNumberSum(0) === 0)
    assert(Prime.primeNumberSum(1) === 0)
    assert(Prime.primeNumberSum(2) === 0)
    assert(Prime.primeNumberSum(3) === 2)
    assert(Prime.primeNumberSum(4) === 5)
    assert(Prime.primeNumberSum(13) === 28)
    assert(Prime.primeNumberSum(16) === 41)
    assert(Prime.primeNumberSum(21) === 77)
  }

  test("longestPrimeSumOfConsecutivePrimes returns longest possible list of consecutive primes whose sum is prime") {
    assert(Prime.longestPrimeSumOfConsecutivePrimes(10) === List(3, 2))
    assert(Prime.longestPrimeSumOfConsecutivePrimes(100) === List(13, 11, 7, 5, 3, 2))
    assert(Prime.longestPrimeSumOfConsecutivePrimes(1000).size === 21)
    assert(Prime.longestPrimeSumOfConsecutivePrimes(1000).sum === 953)
  }

  test("primesFromDigitSubstitution returns primes generated by substituting digits") {
    intercept[Exception] {
      assert(Prime.primesFromDigitSubstitution(2, Map(1 -> 3, 0 -> 1)) === List(13))
    }
    intercept[Exception] {
      assert(Prime.primesFromDigitSubstitution(2, Map(0 -> 0)) === List(13))
    }
    assert(Prime.primesFromDigitSubstitution(1, Map()) === List(2, 3, 5, 7))
    assert(Prime.primesFromDigitSubstitution(2, Map(0 -> 3)) === List(31, 37))
    assert(Prime.primesFromDigitSubstitution(2, Map(1 -> 3)) === List(13, 23, 43, 53, 73, 83))
    assert(Prime.primesFromDigitSubstitution(5, Map(0 -> 5, 1 -> 6, 4 -> 3)) ===
      List( 56003, 56113, 56333, 56443, 56663, 56773, 56993))
  }

  test("isPrime can be done efficiently with a list of all known primes less than the number being checked") {
    assert(Prime.isPrime2(11, List[Long](2, 3, 5, 7)))
    assert(!Prime.isPrime2(15, List[Long](2, 3, 5, 7, 11, 13)))
    assert(!Prime.isPrime2(15, List[Long](2)))
    assert(Prime.isPrime2(17, List[Long](2, 3, 5, 7, 11, 13)))
    assert(Prime.isPrime2(17, List[Long](2, 3)))
  }

  test("primeFactors can use pre-computed prime lookup table for quick prime factorization") {
    val primes = Prime.primes(1).takeWhile(_ <= 100).toList.sorted
    intercept[Exception] {
      Prime.primeFactorsWithLookup(1, primes)
    }
    assert(Prime.primeFactorsWithLookup(2, primes) === Map(2 -> 1))
    assert(Prime.primeFactorsWithLookup(37, primes) === Map(37 -> 1))
    assert(Prime.primeFactorsWithLookup(349, primes) === Map(349 -> 1))
    assert(Prime.primeFactorsWithLookup(720, primes) === Map(2 -> 4, 3 -> 2, 5 -> 1))
    assert(Prime.primeFactorsWithLookup(650, primes) === Map(2 -> 1, 5 -> 2, 13 -> 1))
    assert(Prime.primeFactorsWithLookup(650) === Map(2 -> 1, 5 -> 2, 13 -> 1))
  }

  test("relativePrime/totient returns list/count of numbers less than and relatively prime to specified number") {
    intercept[Exception] {
      assert(Prime.relativePrimes(1) === Seq(1))
    }

    assert(Prime.relativePrimes(2) === Seq(1))
    assert(Prime.relativePrimes(3) === Seq(1, 2))
    assert(Prime.relativePrimes(4) === Seq(1, 3))
    assert(Prime.relativePrimes(5) === Seq(1, 2, 3, 4))
    assert(Prime.relativePrimes(6) === Seq(1, 5))
    assert(Prime.relativePrimes(7) === Seq(1, 2, 3, 4, 5, 6))
    assert(Prime.relativePrimes(8) === Seq(1, 3, 5, 7))
    assert(Prime.relativePrimes(9) === Seq(1, 2, 4, 5, 7, 8))
    assert(Prime.relativePrimes(10) === Seq(1, 3, 7, 9))
    assert(Prime.relativePrimes(11) === Seq(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    assert(Prime.relativePrimes(12) === Seq(1, 5, 7, 11))
    assert(Prime.relativePrimes(13) === Seq(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    assert(Prime.relativePrimes(14) === Seq(1, 3, 5, 9, 11, 13))
    assert(Prime.relativePrimes(15) === Seq(1, 2, 4, 7, 8, 11, 13, 14))
    assert(Prime.relativePrimes(16) === Seq(1, 3, 5, 7, 9, 11, 13, 15))
    assert(Prime.relativePrimes(17) === Seq(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    assert(Prime.relativePrimes(18) === Seq(1, 5, 7, 11, 13, 17))
    assert(Prime.relativePrimes(19) === Seq(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    assert(Prime.relativePrimes(20) === Seq(1, 3, 7, 9, 11, 13, 17, 19))

    assert(Prime.totient(1) === 1)
    assert(Prime.totient(2) === 1)
    assert(Prime.totient(3) === 2)
    assert(Prime.totient(4) === 2)
    assert(Prime.totient(5) === 4)
    assert(Prime.totient(6) === 2)
    assert(Prime.totient(7) === 6)
    assert(Prime.totient(8) === 4)
    assert(Prime.totient(9) === 6)
    assert(Prime.totient(10) === 4)
    assert(Prime.totient(11) === 10)
    assert(Prime.totient(12) === 4)
    assert(Prime.totient(13) === 12)
    assert(Prime.totient(14) === 6)
    assert(Prime.totient(15) === 8)
    assert(Prime.totient(16) === 8)
    assert(Prime.totient(17) === 16)
    assert(Prime.totient(18) === 6)
    assert(Prime.totient(19) === 18)
    assert(Prime.totient(20) === 8)
    assert(Prime.totient(30) === 8)
    assert(Prime.totient(60) === 16)
    assert(Prime.totient(210) === 48)

    assert(Prime.totient(613) === 612)
    assert(Prime.totient(630) === 144)
  }

  test("relativePrimeeFrom1 returns a map of all numbers from 2 to n with their respective mutual primes") {
    assert(Prime.relativePrimesThroughN(20) ===
                                  Map(2 -> Seq(1),
                                      3 -> Seq(1, 2),
                                      4 -> Seq(1, 3),
                                      5 -> Seq(1, 2, 3, 4),
                                      6 -> Seq(1, 5),
                                      7 -> Seq(1, 2, 3, 4, 5, 6),
                                      8 -> Seq(1, 3, 5, 7),
                                      9 -> Seq(1, 2, 4, 5, 7, 8),
                                      10 -> Seq(1, 3, 7, 9),
                                      11 -> Seq(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                                      12 -> Seq(1, 5, 7, 11),
                                      13 -> Seq(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
                                      14 -> Seq(1, 3, 5, 9, 11, 13),
                                      15 -> Seq(1, 2, 4, 7, 8, 11, 13, 14),
                                      16 -> Seq(1, 3, 5, 7, 9, 11, 13, 15),
                                      17 -> Seq(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                                      18 -> Seq(1, 5, 7, 11, 13, 17),
                                      19 -> Seq(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18),
                                      20 -> Seq(1, 3, 7, 9, 11, 13, 17, 19)))
  }

  test("totient1toN returns a map of all numbers from 2 to n with their respective totient values") {
    assert(Prime.totient1toN(20) ===
                                  Map(1 -> 1,
                                      2 -> 1,
                                      3 -> 2,
                                      4 -> 2,
                                      5 -> 4,
                                      6 -> 2,
                                      7 -> 6,
                                      8 -> 4,
                                      9 -> 6,
                                      10 -> 4,
                                      11 -> 10,
                                      12 -> 4,
                                      13 -> 12,
                                      14 -> 6,
                                      15 -> 8,
                                      16 -> 8,
                                      17 -> 16,
                                      18 -> 6,
                                      19 -> 18,
                                      20 -> 8))
  }
}
